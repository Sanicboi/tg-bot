import { AppDataSource } from "./data-source"
import { User } from "./entity/User"
import { Answer } from "./entity/Answer";
import TGBot from "node-telegram-bot-api"
import axios, { AxiosError, AxiosResponse } from "axios";
import {Configuration, OpenAIApi} from "openai"
import { Admin } from "./entity/Admin";
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

dayjs.extend(utc);
dayjs.extend(timezone);

//TODO: change to env variable
const bot = new TGBot('5990028065:AAGQx03OOnmW_9HYWEJRzPwvYQdtvBwR-QM' /*'6207034141:AAERSTefTVzUGjS8oJ92WFV2GRUGEm0AUCc'*/, {polling: true});
let signingUp: number[] = [];
export interface Ifeedback {id: string, text: string, productValuation: number, productDetails:{productName: string, nmId: number, supplierName: string}};
export interface WBRes {data: {feedbacks: Ifeedback[]}}
export interface Iskipped {
    fbId: string,
    userId: number
}

export interface IOrder {
    totalPrice: number;
    discountPercent: number;
    isCancel: boolean;
    lastChangeDate: string;
}

export interface ISale {
    forPay: number;
    saleID: string;
    priceWithDisc: number;
}
import { Bot } from "./funcs/bot";
import {TEXT_REPORT} from "./data/texts";

let skipped: Iskipped[] = [];
let enteringToken: number[] = [];
const conf = new Configuration({apiKey: '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'});
const openai = new OpenAIApi(conf);

AppDataSource.initialize().then(async () => {
    const userRepo = AppDataSource.getRepository(User);
    const adminRepo = AppDataSource.getRepository(Admin); 
    const answerRepo = AppDataSource.getRepository(Answer);

    await bot.setMyCommands([
        {
            command: '/start',
            description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'
        },
        {
            command: '/answer',
            description: 'ü´∂ –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã'
        },
        {
            command: '/report',
            description: 'üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è'
        },
        {
            command: '/month_report',
            description: 'üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ 30 –¥–Ω–µ–π'
        },
        {
            command: '/me',
            description: 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        },
        {
            command: '/improvements',
            description: 'üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ –Ω–∞—à Telegram-–±–æ—Ç –ø–æ –∞–¥—Ä–µ—Å—É https://t.me/MPfact_SupportBot.'
        },
    ]);



    bot.onText(/\/improvements/, async (msg: TGBot.Message) => {
        await bot.sendMessage(msg.chat.id, '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ –Ω–∞—à Telegram-–±–æ—Ç –ø–æ –∞–¥—Ä–µ—Å—É https://t.me/MPfact_SupportBot.');
    });

    // bot.onText(/\/chat/, async (msg: TGBot.Message) =>{
    //     await bot.sendMessage(msg.chat.id, 'https://t.me/mpexpert_chat');
    // })


    bot.onText(/\/start/, async (msg: TGBot.Message) => {
        const user = await userRepo.findOneBy({chatId: String(msg.chat.id)});
        if (!user) {
            await bot.sendMessage(msg.chat.id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–ë–æ—Ç MPfact –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò, –ø–æ–º–æ–∂–µ—Ç:

1. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –æ—Ç–∑—ã–≤–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.
2. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö


üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã –≤ –¥–≤–∞ –∫–ª–∏–∫–∞ –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á!

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. 
            
–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ –∏–º—è

`);
            signingUp.push(msg.chat.id);
        } else {
            let keyboard: TGBot.InlineKeyboardButton[][] = [];
            if (user.enteredStats) {
                keyboard.push([{
                    text: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç',
                    callback_data: 'report'
                }]);
            } else {
                keyboard.push([{
                    text: '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤):',
                    callback_data: 'enter-stats'
                }]);
            }
            if (user.enteredToken) {
                keyboard.push([{
                    text: '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã',
                    callback_data: 'answer'
                }]);
            } else {
                keyboard.push([{
                    text: '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤):',
                    callback_data: 'enter-token'
                }]);
            }
            await bot.sendMessage(msg.chat.id,  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç MPfact, ${user.name}\n–í–∞—à ID: ${user.chatId}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.signupDate.toLocaleDateString()}\n–¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n${user.enteredToken ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:\n${user.enteredStats ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n${user.supplierName ? `–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${user.supplierName}` : ``}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∑–¥–µ—Å—å: https://telegra.ph/Instrukciya-po-dobavleniyu-tokenov-v-bot-MPfact-06-27`, {
                reply_markup: {
                    inline_keyboard: keyboard
                },
                disable_web_page_preview: true
            });
        }
    });
// TODO: copy code (DRY)
bot.onText(/\/me/, async (msg: TGBot.Message) => {
        const user = await userRepo.findOne({where: {chatId: String(msg.chat.id)}, relations: {
            answers: true
        }});
	if (!user) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    let keyboard: TGBot.InlineKeyboardButton[][] = [];
    if (!user.enteredStats) keyboard.push([
        {
            text: '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤):',
            callback_data: 'enter-stats'
        }
    ])
    if (!user.enteredToken) keyboard.push([
        {
            text: '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤):',
            callback_data: 'enter-token'
        }
    ]);
	await bot.sendMessage(msg.chat.id,  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç MPfact, ${user.name}\n–í–∞—à ID: ${user.chatId}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.signupDate.toLocaleDateString()}\n–¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n${user.enteredToken ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:\n${user.enteredStats ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n${user.supplierName ? `–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${user.supplierName}` : ``}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∑–¥–µ—Å—å: https://telegra.ph/Instrukciya-po-dobavleniyu-tokenov-v-bot-MPfact-06-27`,{
        reply_markup: {
            inline_keyboard: keyboard
        },
        disable_web_page_preview: true
    });
});

bot.onText(/(.)+/, async (msg: TGBot.Message) => {
        const user = await userRepo.findOne({where: {chatId: String(msg.chat.id)}, relations: {
            answers: true
        }});
        const admins = await adminRepo.find();

        if (msg.text.startsWith('/') && user) {
            if (user.enteringToken) user.enteringToken = false;
            if (user.enteringStats) user.enteringStats = false;
            await userRepo.save(user);
        }

        if (signingUp.find(el => el === msg.chat.id) && !user) {
            const newUser = new User();
            newUser.name = msg.text || ''; // TODO: –ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä 1
            newUser.chatId = String(msg.chat.id);
            newUser.tgName = msg.from?.username || msg.from?.first_name || '';
            newUser.signupDate = new Date();
            newUser.enteredPromo = false;
            newUser.enteredStats = false;
            newUser.enteringStats = false;
            newUser.special = false;
            newUser.enteringToken = false;
            await userRepo.save(newUser);
            await bot.sendMessage(msg.chat.id, '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                                callback_data: 'no-promo',
                            }
                        ]
                    ]
                }
            });
        } else if (user && !user.enteredPromo && !user.registeredWithoutPromo) {
            if (msg.text === 'special23') {
                user.special = true;
                user.enteredPromo = true;
                await userRepo.save(user);
            } else if (msg.text === '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞') {
                user.enteredPromo = true;
                await userRepo.save(user);
            } else {
                return await bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥');
            }
            // TODO: —É–±—Ä–∞—Ç—å DRY
            await bot.sendMessage(msg.chat.id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç MPfact, ${user.name}\n–í–∞—à ID: ${user.chatId}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.signupDate.toLocaleDateString()}\n–¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n${user.enteredToken ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:\n${user.enteredStats ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n${user.supplierName ? `–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${user.supplierName}` : ``}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∑–¥–µ—Å—å: https://telegra.ph/Instrukciya-po-dobavleniyu-tokenov-v-bot-MPfact-06-27`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤):',
                                callback_data: 'enter-token'
                            }
                        ],
                        [
                            {
                                text: '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤):',
                                callback_data: 'enter-stats'
                            }
                        ]
                    ]
                },
                disable_web_page_preview: true
            });
            admins.forEach(async admin => {
                await bot.sendMessage(+admin.chatId, `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name}, –Ω–∏–∫ –≤ —Ç–≥: @${msg.from?.username || msg.from?.first_name} –ü—Ä–æ–º–æ–∫–æ–¥: ${user.special ? 'special23' : '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞'}`)
            });
        } else if (user && user.enteringStats) {
            try {
                await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
                    params: {
                        dateFrom: (new Date()).toISOString()
                    },
                    headers: {
                        'Authorization': msg.text
                    }
                });
                user.enteringStats = false;
                user.enteredStats = true;
                user.statsToken = msg.text || '';
                await userRepo.save(user);
                await bot.sendMessage(msg.chat.id, '–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                    callback_data: 'start'
                                }
                            ]
                        ]
                    }
                })
            } catch (error) {
                console.log(error);
                await bot.sendMessage(msg.chat.id, `–î–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω.`);
                user.enteringStats = false;
                await userRepo.save(user);
            }
        } else if (user && user.enteringToken) {
            try {
                await axios.get('https://feedbacks-api.wb.ru/api/v1/feedbacks/count-unanswered', {
                    headers: {
                        'Authorization': msg.text
                    }
                });
                user.enteringToken = false;
                user.enteredToken = true;
                user.token = msg.text || '';
                await userRepo.save(user);
                await bot.sendMessage(msg.chat.id, '–¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                    callback_data: 'start'
                                }
                            ]
                        ]
                    }
                })
            } catch (error) {
                console.log(error);
                await bot.sendMessage(msg.chat.id, '–î–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω.');
            }
        } else if (user && user?.answers?.find(el => el.waitingForResponse == true)) {
            await Bot.edit(msg, admins, bot, user, msg.text || '', answerRepo);
        }
    });

    bot.on('callback_query', async (q: TGBot.CallbackQuery) => {
        const user = await userRepo.findOneBy({chatId: String(q.from.id)});
        const admins = await adminRepo.find();
        if (user && q.data === 'enter-stats') {
            user.enteringStats = true;
            await userRepo.save(user);
            await bot.sendMessage(q.from.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        } else if (user && q.data === 'no-promo') {
            user.registeredWithoutPromo = true;
            await userRepo.save(user);
            await bot.sendMessage(q.from.id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç MPfact, ${user.name}\n–í–∞—à ID: ${user.chatId}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.signupDate.toLocaleDateString()}\n–¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n${user.enteredToken ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:\n${user.enteredStats ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n${user.supplierName ? `–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${user.supplierName}` : ``}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∑–¥–µ—Å—å: https://telegra.ph/Instrukciya-po-dobavleniyu-tokenov-v-bot-MPfact-06-27`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤):',
                                callback_data: 'enter-token'
                            }
                        ],
                        [
                            {
                                text: '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤):',
                                callback_data: 'enter-stats'
                            }
                        ]
                    ]
                },
                disable_web_page_preview: true
            });
        } else if (user && q.data === 'enter-token') {
            user.enteringToken = true;
            await userRepo.save(user);
            await bot.sendMessage(q.from.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤)');
        } else if (user && q.data === 'start') {
            let keyboard: TGBot.InlineKeyboardButton[][] = [];
            if (user.enteredStats) {
                keyboard.push([{
                    text: '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç',
                    callback_data: 'report'
                }]);
            } else {
                keyboard.push([{
                    text: '–í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤):',
                    callback_data: 'enter-stats'
                }]);
            }
            if (user.enteredToken) {
                keyboard.push([{
                    text: '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã',
                    callback_data: 'answer'
                }]);
            } else {
                keyboard.push([{
                    text: '–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤):',
                    callback_data: 'enter-token'
                }]);
            }
            await bot.sendMessage(q.from.id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç MPfact, ${user.name}\n–í–∞—à ID: ${user.chatId}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.signupDate.toLocaleDateString()}\n–¢–æ–∫–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:\n${user.enteredToken ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–¢–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:\n${user.enteredStats ? '‚úÖ–í–≤–µ–¥–µ–Ω' : '‚ùå–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n${user.supplierName ? `–ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${user.supplierName}` : ``}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∑–¥–µ—Å—å: https://telegra.ph/Instrukciya-po-dobavleniyu-tokenov-v-bot-MPfact-06-27`, {
                reply_markup: {
                    inline_keyboard: keyboard
                },
                disable_web_page_preview: true
            });
        } else if (q.data === 'report') {
            await bot.sendChatAction(q.from.id, 'typing');
            const now = dayjs(new Date()).tz('Europe/Moscow');
            const today: string = dayjs(now).format('YYYY-MM-DD');
            if (!user) return await bot.sendMessage(q.from.id, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
            if (!user.enteredStats) return await bot.sendMessage(q.from.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            if (now.day() === 1 && now.hour() > 3 && now.hour() < 16) return await bot.sendMessage(q.from.id, '–£ –≤–∞–π–ª–¥–±–µ—Ä—Ä–∏–∑ –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Ä–∞–±–æ—Ç–µ –º–µ—Ç–æ–¥–∞ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 3:00-16:00 –ú–°–ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            try {
                const res: AxiosResponse<ISale[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/sales', {
                    headers: {
                        Authorization: user.statsToken
                    },
                    params: {
                        dateFrom: today,
                        flag: 1
                    }
                });
                const res2: AxiosResponse<IOrder[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
                    headers: {
                        Authorization: user.statsToken
                    },
                    params: {
                        flag: 1,
                        dateFrom: today
                    }
                });
                let cancellations: IOrder[] = [];

                let refunds: ISale[] = [];
                res.data.forEach(el => {
                    if (el.saleID.startsWith('R')) refunds.push(el);
                });
                res2.data.forEach(el => {
                    // @ts-ignore
                    if (el.isCancel) cancellations.push(el);
                });

                await bot.sendMessage(q.from.id, `–û–¢–ß–ï–¢ –ó–ê –°–ï–ì–û–î–ù–Ø (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ ${now.format('DD.MM.YYYY HH:mm')} –ú–°–ö)\n\n` + TEXT_REPORT(res.data, res2.data, cancellations, refunds));

                admins.forEach(async (admin) => {
                    await bot.sendMessage(+admin.chatId, `–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${q.from?.username || q.from?.first_name}, –ü—Ä–æ–º–æ–∫–æ–¥: ${user.special ? 'special23': '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞'}`);
                });
            } catch (error) {
                console.log(error);
                await bot.sendMessage(q.from.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
            }
        } else if (user && q.data === 'answer') {
            skipped = skipped.filter(el => {
                return el.userId !== user.id;
            });
            if (!user.enteredToken) return await bot.sendMessage(q.from.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
            await Bot.home(q, bot, user);
        }
         else if (user && /reply-(.+)/.test(q.data || '')) {
            await bot.sendChatAction(q.from.id, 'typing');
            if (!user.enteredToken) return await bot.sendMessage(q.from.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
            const match: RegExpExecArray|null = /reply-(.+)/.exec(q.data || '');
            if (!match) return;
            await Bot.reply(bot, answerRepo, skipped, user, openai, q, +match[1]);
        } else if (/publish-(.+)/.test(q.data || '')) {
            const match = /publish-(.+)/.exec(q.data || '');
            if (!match) return;
            await Bot.publish(q, bot, +match[1], answerRepo);
        } else if (user && /confirm-(.+)/.test(q.data || '')) {
            const match = /confirm-(.+)/.exec(q.data || '');
            if (!match) return;
            await Bot.confirm(user, +match[1], admins, bot, q, answerRepo);
        } else if (user && /reject-(.+)/.test(q.data || '')) {
            const match = /reject-(.+)/.exec(q.data || '');
            if (!match) return;
            await Bot.remove(q, +match[1], user, bot, answerRepo, skipped);
        } else if (user && /delete-(.+)/.test(q.data || '')) {
            const match = /delete-(.+)/.exec(q.data || '');
            if (!match) return;
            const admin = await adminRepo.findOneBy({chatId: String(q.from.id)});
            if (!admin) return await bot.sendMessage(q.from.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω');
            const user = await userRepo.findOneBy({id: +match[1]});
            if (!user) return
            await AppDataSource.query('SET session_replication_role = \'replica\';');
            await userRepo.remove(user);
            await AppDataSource.query('SET session_replication_role = \'origin\';');
            await bot.sendMessage(Number(admin.chatId), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        } else if ( user && /edit-(.+)/.test(q.data || '')) {
            const match = /edit-(.+)/.exec(q.data || '');
            if (!match) return;
            const answer = await answerRepo.findOneBy({id: +match[1]});
            if (!answer) return;
            answer.waitingForResponse = true;
            await answerRepo.save(answer);
            await bot.sendMessage(q.from.id, '–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.');
        } 
    });

    bot.onText(/^\/usersdetails$/, async (msg: TGBot.Message) => {
        const admin = await adminRepo.findOneBy({
            chatId: String(msg.chat.id),
        });
        if (!admin) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –∞–¥–º–∏–Ω');
        const users = await userRepo.find();
        users.forEach(async user => {
            await bot.sendMessage(msg.chat.id, `
                –ò–º—è: ${user.name},
                @${user.tgName}
                –ü—Ä–æ–º–æ–∫–æ–¥: ${user.special ? 'special23' : '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞'}
            `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–£–¥–∞–ª–∏—Ç—å',
                                callback_data: `delete-${user.id}`
                            }
                        ]
                    ]
                }
            })
        });
    });

    bot.onText(/^\/users$/, async (msg: TGBot.Message) => {
        try {
            const [result, count] = await userRepo.findAndCount();
            
            await bot.sendMessage(msg.chat.id, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: ${count}\n–° –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞: ${result.filter(e => e.enteredPromo && !e.special).length}\n–° –ø—Ä–æ–º–æ–∫–æ–¥–æ–º special23: ${result.filter(e => e.enteredPromo && e.special).length}\n–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${result.filter(e => !e.enteredPromo).length}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è: ${result.filter(e => e.signupDate.getDay() === (new Date()).getDay() && e.signupDate.getMonth() === (new Date()).getMonth() && e.signupDate.getFullYear() === (new Date()).getFullYear()).length}`);
            
        } catch (error) {
            console.log(error);
        }
    });

    bot.onText(/\/admin (.+)/, async (msg: TGBot.Message, match: RegExpExecArray | null) => {
        if (match && match[1] !== '–ø—Ç–∞—à–∫–∞–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') return await bot.sendMessage(msg.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∞–¥–º–∏–Ω–∞');
        let admin = new Admin();
	admin.chatId = String(msg.chat.id)
        const result = await adminRepo.save(admin);
        if (!result) return await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: /users');
        // TODO: —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–æ–Ω
        setTimeout(async () =>{
            setInterval(async () => {
                const [result, count] = await userRepo.findAndCount();
                await bot.sendMessage(msg.chat.id, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: ${count}\n–° –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞: ${result.filter(e => e.enteredPromo && !e.special).length}\n–° –ø—Ä–æ–º–æ–∫–æ–¥–æ–º special23: ${result.filter(e => e.enteredPromo && e.special).length}\n–ë–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${result.filter(e => !e.enteredPromo).length}`);
            }, 24*60*60*1000);
        }, (new Date()).getHours() >= 21 ? 0 : (21 - (new Date()).getHours()) * 60 * 60 * 1000);
    });

    bot.onText(/\/report/, async (msg: TGBot.Message) => {
        const now = dayjs(new Date()).tz('Europe/Moscow');
        const today: string = dayjs(now).format('YYYY-MM-DD');
        const user: User = await userRepo.findOneBy({chatId: String(msg.chat.id)});
        const admins: Admin[] = await adminRepo.find();
        await bot.sendChatAction(msg.chat.id, 'typing');
        if (!user) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        if (!user.enteredStats) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        try {
            const res: AxiosResponse<ISale[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/sales', {
                headers: {
                    Authorization: user.statsToken
                },
                params: {
                    dateFrom: today,
                    flag: 1
                }
            });
            const res2: AxiosResponse<IOrder[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
                headers: {
                    Authorization: user.statsToken
                },
                params: {
                    flag: 1,
                    dateFrom: today
                }
            });
            let cancellations: IOrder[] = [];

            let refunds: ISale[] = [];
            res.data.forEach(el => {
                if (el.saleID.startsWith('R')) refunds.push(el);
            });
            res2.data.forEach(el => {
                // @ts-ignore
                if (el.isCancel) cancellations.push(el);
            });

            await bot.sendMessage(msg.from.id, `–û–¢–ß–ï–¢ –ó–ê –°–ï–ì–û–î–ù–Ø (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ ${now.format('DD.MM.YYYY HH:mm')} –ú–°–ö)\n\n` + TEXT_REPORT(res.data, res2.data, cancellations, refunds));

            admins.forEach(async (admin) => {
                await bot.sendMessage(+admin.chatId, `–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${msg.from?.username || msg.from?.first_name}, –ü—Ä–æ–º–æ–∫–æ–¥: ${user.special ? 'special23': '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞'}`);
            });
        } catch (error) {
            console.log(error);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
        }
    });

    bot.onText(/\/month_report/, async (msg: TGBot.Message) => {
        const user = await userRepo.findOneBy({chatId: String(msg.chat.id)});
        const admins = await adminRepo.find();
        await bot.sendChatAction(msg.chat.id, 'typing');
        if (!user) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        if (!user.enteredStats) return await bot.sendMessage(msg.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

        const now = dayjs(new Date()).tz('Europe/Moscow');
        const today = now.format('YYYY-MM-DD');
        const yesterday = now.subtract(1, 'day').format('YYYY-MM-DD');
        const week = now.subtract(7, 'day').format('YYYY-MM-DD');
        const month = now.subtract(30, 'day').format('YYYY-MM-DD');

        const periodData: Record<string, { title: string, orders: IOrder[], cancels: IOrder[], sales: ISale[], refunds: ISale[] }> = {
            today: {
                title: '–°–ï–ì–û–î–ù–Ø',
                orders: [],
                cancels: [],
                sales: [],
                refunds: []
            },
            yesterday: {
                title: '–í–ß–ï–†–ê',
                orders: [],
                cancels: [],
                sales: [],
                refunds: []
            },
            week: {
                title: '–ó–ê 7 –î–ù–ï–ô',
                orders: [],
                cancels: [],
                sales: [],
                refunds: []
            },
            month: {
                title: '–ó–ê 30 –î–ù–ï–ô',
                orders: [],
                cancels: [],
                sales: [],
                refunds: []
            },
        }

        try {
            const res: AxiosResponse<ISale[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/sales', {
                headers: {
                    Authorization: user.statsToken
                },
                params: {
                    flag: 0,
                    dateFrom: month,
                }
            });
            const res2: AxiosResponse<IOrder[]> = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
                headers: {
                    'Authorization': user.statsToken
                },
                params: {
                    flag: 0,
                    dateFrom: month,
                }
            });

            res.data.forEach(sale => {
                // @ts-ignore
                const lastChangeDate: string = dayjs(sale.lastChangeDate).format('YYYY-MM-DD');
                // @ts-ignore
                const date: string = dayjs(sale.date).format('YYYY-MM-DD')

                if (date === today) periodData.today.sales.push(sale);
                if (lastChangeDate === today && sale.saleID.startsWith('R')) periodData.today.refunds.push(sale);

                if (date === yesterday) periodData.yesterday.sales.push(sale);
                if (lastChangeDate === yesterday && sale.saleID.startsWith('R')) periodData.yesterday.refunds.push(sale);

                if (date >= week) periodData.week.sales.push(sale);
                if (lastChangeDate >= week && sale.saleID.startsWith('R')) periodData.week.refunds.push(sale);

                if (date >= month) periodData.month.sales.push(sale);
                if (lastChangeDate >= month && sale.saleID.startsWith('R')) periodData.month.refunds.push(sale);
            });

            res2.data.forEach(order => {
                // @ts-ignore
                const date: string = dayjs(order.date).format('YYYY-MM-DD');
                // @ts-ignore
                const cancelDate: string = dayjs(order.cancel_dt).format('YYYY-MM-DD');

                if (date === today) periodData.today.orders.push(order);
                if (order.isCancel && cancelDate === today) periodData.today.cancels.push(order)

                if (date === yesterday) periodData.yesterday.orders.push(order);
                if (order.isCancel && cancelDate === yesterday) periodData.yesterday.cancels.push(order);

                if (date >= week) periodData.week.orders.push(order);
                if (order.isCancel && cancelDate >= week) periodData.week.cancels.push(order);

                if (date >= month) periodData.month.orders.push(order);
                if (order.isCancel && cancelDate >= month) periodData.month.cancels.push(order);
            });

            let periodReports: string[] = [];

            for (const period in periodData) {
                const prd = periodData[period];
                periodReports.push(`<b>${prd.title}</b>\n` + TEXT_REPORT(prd.sales, prd.orders, prd.cancels, prd.refunds));
            }

            await bot.sendMessage(msg.from.id, `–û–¢–ß–ï–¢ –ó–ê 30 –î–ù–ï–ô (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ ${now.format('DD.MM.YYYY HH:mm')} –ú–°–ö)\n\n${periodReports.join('\n\n')}`, {
                parse_mode: 'HTML'
            });

            admins.forEach(async (admin) => {
                await bot.sendMessage(+admin.chatId, `–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${msg.from?.username || msg.from?.first_name}, –ü—Ä–æ–º–æ–∫–æ–¥: ${user.special ? 'special23': '—Ä–∞–Ω–Ω—è—è–ø—Ç–∞—à–∫–∞'}`);
            });
        } catch (error) {
            console.log(error);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
        }
    });

    bot.onText(/\/answer/, async (msg: TGBot.Message) => {
        const user = await userRepo.findOneBy({chatId: String(msg.chat.id)});
        if (!user) return await bot.sendMessage(msg.from?.id || 0, '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        await Bot.newHome(msg, bot, user);
    });
}).catch(error => console.log(error))
